// <auto-generated />
using System;
using Capri.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capri.Database.Migrations
{
    [DbContext(typeof(CapriDbContext))]
    partial class CapriDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capri.Database.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");

                    b.HasData(
                        new { Id = 1, FacultyId = 1, Name = "Architektura" },
                        new { Id = 2, FacultyId = 1, Name = "Architektura Wnętrz" },
                        new { Id = 3, FacultyId = 2, Name = "Budownictwo" },
                        new { Id = 4, FacultyId = 2, Name = "Inżynieria Środowiska" },
                        new { Id = 5, FacultyId = 3, Name = "Inżynieria Biomedyczna" },
                        new { Id = 6, FacultyId = 3, Name = "Inżynieria Materiałowa" },
                        new { Id = 7, FacultyId = 3, Name = "Mechanika i Budowa Maszyn" },
                        new { Id = 8, FacultyId = 3, Name = "Mechatronika" },
                        new { Id = 9, FacultyId = 3, Name = "Zarządzanie i Inżynieria Produkcji" },
                        new { Id = 10, FacultyId = 4, Name = "Elektronika i Telekomunikacja" },
                        new { Id = 11, FacultyId = 4, Name = "Teleinformatyka" },
                        new { Id = 12, FacultyId = 5, Name = "Automatyka i Robotyka" },
                        new { Id = 13, FacultyId = 5, Name = "Elektrotechnika" },
                        new { Id = 14, FacultyId = 5, Name = "Energetyka" },
                        new { Id = 15, FacultyId = 5, Name = "Matematyka w Technice" },
                        new { Id = 16, FacultyId = 6, Name = "Edukacja Techniczno-Informatyczna" },
                        new { Id = 17, FacultyId = 6, Name = "Fizyka Techniczna" },
                        new { Id = 18, FacultyId = 7, Name = "Informatyka" },
                        new { Id = 19, FacultyId = 7, Name = "Bioinformatyka" },
                        new { Id = 20, FacultyId = 7, Name = "Sztuczna Inteligencja / Artificial Intelligence" },
                        new { Id = 21, FacultyId = 8, Name = "Konstrukcja i Eksploatacja Środków Transportu" },
                        new { Id = 22, FacultyId = 8, Name = "Transport" },
                        new { Id = 23, FacultyId = 8, Name = "Lotnictwo i Kosmonautyka" },
                        new { Id = 24, FacultyId = 9, Name = "Logistyka" },
                        new { Id = 25, FacultyId = 9, Name = "Inżynieria Zarządzania" },
                        new { Id = 26, FacultyId = 9, Name = "Inżynieria Bezpieczeństwa" },
                        new { Id = 27, FacultyId = 10, Name = "Inżynieria Chemiczna i Procesowa" },
                        new { Id = 28, FacultyId = 10, Name = "Technologia Chemiczna / Chemical Technology" },
                        new { Id = 29, FacultyId = 10, Name = "Technologie Ochrony Środowiska" },
                        new { Id = 30, FacultyId = 10, Name = "Inżynieria Farmaceutyczna" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Faculties");

                    b.HasData(
                        new { Id = 1, Name = "Wydział Architektury" },
                        new { Id = 2, Name = "Wydział Budownictwa i Inżynierii Środowiska" },
                        new { Id = 3, Name = "Wydział Budowy Maszyn i Zarządzania" },
                        new { Id = 4, Name = "Wydział Elektroniki i Telekomunikacji" },
                        new { Id = 5, Name = "Wydział Elektryczny" },
                        new { Id = 6, Name = "Wydział Fizyki Technicznej" },
                        new { Id = 7, Name = "Wydział Informatyki" },
                        new { Id = 8, Name = "Wydział Inżynierii Transportu" },
                        new { Id = 9, Name = "Wydział Inżynierii Zarządzania" },
                        new { Id = 10, Name = "Wydział Technologii Chemicznej" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.IntRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, ConcurrencyStamp = "41d0add9-0194-405b-8e1a-4341afed0a6d", Name = "Dean", NormalizedName = "Dean" },
                        new { Id = 3, ConcurrencyStamp = "8df094d5-036c-4107-8376-f2b0ca6c3d4a", Name = "Student", NormalizedName = "Student" },
                        new { Id = 2, ConcurrencyStamp = "b92042d8-ee84-4917-8758-b693869d862c", Name = "Promoter", NormalizedName = "Promoter" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.IntRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.IntUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.IntUserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.IntUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId", "RoleId");

                    b.HasAlternateKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = 1, RoleId = 1, Id = 1 },
                        new { UserId = 2, RoleId = 1, Id = 2 },
                        new { UserId = 3, RoleId = 1, Id = 3 },
                        new { UserId = 4, RoleId = 1, Id = 4 },
                        new { UserId = 5, RoleId = 1, Id = 5 },
                        new { UserId = 6, RoleId = 3, Id = 6 },
                        new { UserId = 7, RoleId = 3, Id = 7 },
                        new { UserId = 8, RoleId = 3, Id = 8 },
                        new { UserId = 9, RoleId = 3, Id = 9 },
                        new { UserId = 10, RoleId = 3, Id = 10 },
                        new { UserId = 11, RoleId = 2, Id = 11 },
                        new { UserId = 12, RoleId = 2, Id = 12 },
                        new { UserId = 13, RoleId = 2, Id = 13 },
                        new { UserId = 14, RoleId = 2, Id = 14 },
                        new { UserId = 15, RoleId = 2, Id = 15 },
                        new { UserId = 16, RoleId = 2, Id = 16 },
                        new { UserId = 17, RoleId = 2, Id = 17 },
                        new { UserId = 18, RoleId = 2, Id = 18 },
                        new { UserId = 19, RoleId = 2, Id = 19 },
                        new { UserId = 20, RoleId = 2, Id = 20 },
                        new { UserId = 21, RoleId = 2, Id = 21 },
                        new { UserId = 22, RoleId = 2, Id = 22 },
                        new { UserId = 23, RoleId = 2, Id = 23 },
                        new { UserId = 24, RoleId = 2, Id = 24 },
                        new { UserId = 25, RoleId = 2, Id = 25 },
                        new { UserId = 26, RoleId = 2, Id = 26 },
                        new { UserId = 27, RoleId = 2, Id = 27 }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.IntUserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Capri.Database.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, AccessFailedCount = 0, ConcurrencyStamp = "7ca4a632-c6a3-40c3-9629-f0373a520ab0", Email = "dean1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN1@GMAIL.COM", NormalizedUserName = "DEAN1@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEN05YFr0RVhgghahgWFbnMwDWtALatuA1yKXPll2ncihG8Ucn049uxB5QxEtCeBexw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean1@gmail.com" },
                        new { Id = 2, AccessFailedCount = 0, ConcurrencyStamp = "5b2eb0cc-51e7-4d79-b402-8e7b8af252fc", Email = "dean2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN2@GMAIL.COM", NormalizedUserName = "DEAN2@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEEw5ttGdVcZVI4+IsBDxa9t4/eXCuLjB1rF1w1mKH8H5cBms9gEdnuXVQcflB/Q7mg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean2@gmail.com" },
                        new { Id = 3, AccessFailedCount = 0, ConcurrencyStamp = "1c2500a1-2960-4bb9-a69f-76461e7f065e", Email = "dean3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN3@GMAIL.COM", NormalizedUserName = "DEAN3@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEL/bSsP+RqoSI/TNwXveBNx8tlCHojgk+q90v8xb2FAkWnsymBaebAKRr8T9v2vj5A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean3@gmail.com" },
                        new { Id = 4, AccessFailedCount = 0, ConcurrencyStamp = "89e3d072-dcaa-45e8-8d61-5542c1be32d9", Email = "dean4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN4@GMAIL.COM", NormalizedUserName = "DEAN4@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEK7fLkm6fBLfK1RBfuUGTzzWgHM040yTVnrDf3+xwC1QnYjY/VI+LqeiVAW13f6+yg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean4@gmail.com" },
                        new { Id = 5, AccessFailedCount = 0, ConcurrencyStamp = "198ec1f1-c9e6-4de7-be66-8866194db9fe", Email = "dean5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "DEAN5@GMAIL.COM", NormalizedUserName = "DEAN5@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEINtnZA0JCfVPnm4ZhldP9F2Hj8VJvtejSXGILaTz25hL79nx3oaye0aHj6RUabMqA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dean5@gmail.com" },
                        new { Id = 6, AccessFailedCount = 0, ConcurrencyStamp = "09b7ced5-1578-4754-9b42-40e837805992", Email = "student1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT1@GMAIL.COM", NormalizedUserName = "STUDENT1@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAECHPtNIJRn70x4qcbCR8lr4qHm2avAkH+DRY5OyY6JVMduhxXHg8LtMrAkI2YUO+JQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student1@gmail.com" },
                        new { Id = 7, AccessFailedCount = 0, ConcurrencyStamp = "4f06fcab-67db-4d56-bcd8-29a140a216b6", Email = "student2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT2@GMAIL.COM", NormalizedUserName = "STUDENT2@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAENomWq+TZGBtoK/orXtHnuFIvcJMzABSN09Mwf3buK3ugDHLKJOJAumd2ocDgnWEdQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student2@gmail.com" },
                        new { Id = 8, AccessFailedCount = 0, ConcurrencyStamp = "6d49706e-71ad-4c27-9b1d-78bd2540fc83", Email = "student3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT3@GMAIL.COM", NormalizedUserName = "STUDENT3@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEMXW9sDAmnE9xcHW7FbWR3sRJy2FYoBfRSuosbNYZ8/bQLf+RaCkURwi9hraiI2ncQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student3@gmail.com" },
                        new { Id = 9, AccessFailedCount = 0, ConcurrencyStamp = "0e41fb98-c2ef-406b-8e97-7847861228da", Email = "student4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT4@GMAIL.COM", NormalizedUserName = "STUDENT4@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEDyr83kWdFXB3xt/oH1YYi/3c5g0IOot4N0eSiaN2RazVKjNU0t3Njfw7/bPoRzLvw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student4@gmail.com" },
                        new { Id = 10, AccessFailedCount = 0, ConcurrencyStamp = "1e8682b9-1050-4e60-80a7-728571002859", Email = "student5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "STUDENT5@GMAIL.COM", NormalizedUserName = "STUDENT5@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELd2H6oLX1NZWgr+9RLJ6DYt+phGkVwrH6lAoGoM18HKPwBKzDHsSZjkaXI913cDVA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "student5@gmail.com" },
                        new { Id = 11, AccessFailedCount = 0, ConcurrencyStamp = "14ec6e61-c578-4944-a77f-ff6cef5f158a", Email = "irmina.maslowska@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "IRMINA.MASLOWSKA@PUT.POZNAN.PL", NormalizedUserName = "IRMINA.MASLOWSKA@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEBHujWnSOkufwhBZGDRJGIzHAvhLFsLVfLPyZTc1VWqewMOQheFtLiWZNiBOUSI+JA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "irmina.maslowska@put.poznan.pl" },
                        new { Id = 12, AccessFailedCount = 0, ConcurrencyStamp = "fdcca6b7-d398-491d-9133-417e5d7bc78b", Email = "bartlomiej.predki@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "BARTLOMIEJ.PREDKI@PUT.POZNAN.PL", NormalizedUserName = "BARTLOMIEJ.PREDKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEJPKufbtkymoZ2KUBtTbeVOAeXA3o7PPvdWgklbrEpio47wMBGYOhiJsSuko8WGkog==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "bartlomiej.predki@put.poznan.pl" },
                        new { Id = 13, AccessFailedCount = 0, ConcurrencyStamp = "fb1ae0a9-ef97-4b99-93e5-cf84db36d8fd", Email = "milosz.kadzinski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "MILOSZ.KADZINSKI@PUT.POZNAN.PL", NormalizedUserName = "MILOSZ.KADZINSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEBszOXb3hn+vdj7x2oYjVb0jnQaKTIqwWq0i38jhdBSke+EzDcQPbGu8iksWAgHOlQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "milosz.kadzinski@put.poznan.pl" },
                        new { Id = 14, AccessFailedCount = 0, ConcurrencyStamp = "a77629ad-00d3-4b7d-83c3-1d01372a3214", Email = "wojciech.kotlowski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "WOJCIECH.KOTLOWSKI@PUT.POZNAN.PL", NormalizedUserName = "WOJCIECH.KOTLOWSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEIygijbGeK3QhEWpMICTUmA3K3V5a2BxZLRO9GYDwJ6ifQGMgvotNlBYW/8xT/ybNA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "wojciech.kotlowski@put.poznan.pl" },
                        new { Id = 15, AccessFailedCount = 0, ConcurrencyStamp = "3c1854c8-024c-43f8-962c-544de60ed930", Email = "jerzy.nawrocki@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "JERZY.NAWROCKI@PUT.POZNAN.PL", NormalizedUserName = "JERZY.NAWROCKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEDSVbGOQuWdLLm5NVhxAbkhSxLEnYoeuC209rlWUd4iNPxZWjyG9iPHhJRPMoL+STQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "jerzy.nawrocki@put.poznan.pl" },
                        new { Id = 16, AccessFailedCount = 0, ConcurrencyStamp = "69ec60cd-c215-4fa2-8abd-c936bed3984e", Email = "promoter1@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER1@GMAIL.COM", NormalizedUserName = "PROMOTER1@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEK7+9PovBm+SCwKU16An3O1+lD3QL5MoEE43MaJ1U+P3aHhhK5I+Tr9KVRwXG8BxMA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter1@gmail.com" },
                        new { Id = 17, AccessFailedCount = 0, ConcurrencyStamp = "674c06a5-f630-49ab-a381-b8c3e955b2cc", Email = "promoter2@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER2@GMAIL.COM", NormalizedUserName = "PROMOTER2@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELoYrYuzSEnhgUjlED8u1woQ9uwg3Y+oQ4C1MzlwKSNj1cblOf71AMuYBpF18+YLOw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter2@gmail.com" },
                        new { Id = 18, AccessFailedCount = 0, ConcurrencyStamp = "9ef8f764-3aac-4750-b773-6916c520c511", Email = "promoter3@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER3@GMAIL.COM", NormalizedUserName = "PROMOTER3@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAENB4L9yArr6kOKU9+aAe+8WoaN8F24tWNuywE43tH0PXOXccQwgu1nNpiJeajYitxA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter3@gmail.com" },
                        new { Id = 19, AccessFailedCount = 0, ConcurrencyStamp = "1bcaf670-1373-472e-8d7a-5dedb4e763e4", Email = "promoter4@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER4@GMAIL.COM", NormalizedUserName = "PROMOTER4@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEEhDNuPEmxk+AAZ1WwoY6kS5ttSm3PhAZfY54cv3NkSvqQ4Evt/N0clera1tVrcbaA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter4@gmail.com" },
                        new { Id = 20, AccessFailedCount = 0, ConcurrencyStamp = "410f3886-3c38-4462-a531-ddbb7e98d796", Email = "promoter5@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER5@GMAIL.COM", NormalizedUserName = "PROMOTER5@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEIp5/DGct9cmc1OZW7jxEjlKXOADcFYD5BwTsLLKtCcSxB5rjm8LXeywwFFA9CFXmw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter5@gmail.com" },
                        new { Id = 21, AccessFailedCount = 0, ConcurrencyStamp = "4145611f-6124-4a0d-bd3e-1840bb255201", Email = "promoter6@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER6@GMAIL.COM", NormalizedUserName = "PROMOTER6@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEO3lv2iRTDw/ep0nGtR6YOTU6IEdB7WpV7+ArJX+3zZV1bl9R24tI64NE4s1hwcIrQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter6@gmail.com" },
                        new { Id = 22, AccessFailedCount = 0, ConcurrencyStamp = "9b7283f1-dc90-4e9e-b7d6-f3bd9359b3a6", Email = "promoter7@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER7@GMAIL.COM", NormalizedUserName = "PROMOTER7@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEPE2T7eD9yu1iE7phpjoCCAGv3N7teCfoSj8JyZZQMR+CzcyZ31om9arwqf0pcoIqA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter7@gmail.com" },
                        new { Id = 23, AccessFailedCount = 0, ConcurrencyStamp = "96f07ae2-7f3f-41dc-b01f-6d5a9514bb39", Email = "promoter8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER8@GMAIL.COM", NormalizedUserName = "PROMOTER8@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEPhPBCutkgCxrD17na0LSyEpqSCzUmjQgyUS64ka594u0XjWvHHbR8pLqJPi39vPsg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter8@gmail.com" },
                        new { Id = 24, AccessFailedCount = 0, ConcurrencyStamp = "76bbc418-e788-4dc9-bd2f-50941337014b", Email = "promoter9@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER9@GMAIL.COM", NormalizedUserName = "PROMOTER9@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEAXe38QabvJO1r6inTlexj/GidJCRwegxjH6dqvj/lescizec+hSqKqVeYrRq/B5rQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter9@gmail.com" },
                        new { Id = 25, AccessFailedCount = 0, ConcurrencyStamp = "c32b55ad-5c24-448b-b478-a75e0a62c4e4", Email = "katarzyna.adamska@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "KATARZYNA.ADAMSKA@PUT.POZNAN.PL", NormalizedUserName = "KATARZYNA.ADAMSKA@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEAUlOeyCbeXvQD9LEpM8AXhBGRWx/pHeHi/5gsRoRyfc518Wjt52D8h2OKCvGgayGQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "katarzyna.adamska@put.poznan.pl" },
                        new { Id = 26, AccessFailedCount = 0, ConcurrencyStamp = "9d38dff1-c838-43bc-bd36-c8b2ae9d7277", Email = "krzysztof.alejski@put.poznan.pl", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "KRZYSZTOF.ALEJSKI@PUT.POZNAN.PL", NormalizedUserName = "KRZYSZTOF.ALEJSKI@PUT.POZNAN.PL", PasswordHash = "AQAAAAEAACcQAAAAEJRBr0S8Tc1qBqmQCKcHOCy5j4J9rGdjptRkmFqAXvQej7UekTz/an9fowBECwVMbQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "krzysztof.alejski@put.poznan.pl" },
                        new { Id = 27, AccessFailedCount = 0, ConcurrencyStamp = "b27fbf5f-bede-4f80-b72b-7bd61776e8ac", Email = "promoter10@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PROMOTER10@GMAIL.COM", NormalizedUserName = "PROMOTER10@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELxAsKkrw0M0/66fPnnMbG0JQXhmYm4DBPdkSSav012zXzSXLGlCVVBE13SvYWRvjA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "promoter10@gmail.com" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Institute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Institutes");

                    b.HasData(
                        new { Id = 1, Name = "Instytut Informatyki" },
                        new { Id = 2, Name = "Instytut Technologii Mechanicznej" },
                        new { Id = 3, Name = "Instytut Matematyki" },
                        new { Id = 4, Name = "Instytut Technologii Materiałów" },
                        new { Id = 5, Name = "Instytut Inżynierii Lądowej" },
                        new { Id = 6, Name = "Instytut Inżynierii Środowiska" },
                        new { Id = 7, Name = "Instytut Chemii i Elektrochemii Technicznej" },
                        new { Id = 8, Name = "Instytut Elektrotechniki i Elektroniki Przemysłowej" },
                        new { Id = 9, Name = "Instytut Mechaniki Stosowanej" },
                        new { Id = 10, Name = "Instytut Technologii i Inżynierii Chemicznej" },
                        new { Id = 11, Name = "Instytut Architektury i Planowania Przestrzennego" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExpectedNumberOfBachelorProposals");

                    b.Property<int>("ExpectedNumberOfMasterProposals");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("InstituteId");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("TitlePostfix");

                    b.Property<string>("TitlePrefix")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.HasIndex("UserId");

                    b.ToTable("Promoters");

                    b.HasData(
                        new { Id = 11, ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Irmina", InstituteId = 1, LastName = "Masłowska", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 11 },
                        new { Id = 12, ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Bartłomiej", InstituteId = 1, LastName = "Prędki", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 12 },
                        new { Id = 13, ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Miłosz", InstituteId = 1, LastName = "Kadziński", TitlePostfix = "", TitlePrefix = "dr hab. inż.", UserId = 13 },
                        new { Id = 14, ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Wojciech", InstituteId = 1, LastName = "Kotłowski", TitlePostfix = "", TitlePrefix = "dr hab. inż.", UserId = 14 },
                        new { Id = 15, ExpectedNumberOfBachelorProposals = 2, ExpectedNumberOfMasterProposals = 1, FirstName = "Jerzy", InstituteId = 1, LastName = "Nawrocki", TitlePostfix = "prof. PP", TitlePrefix = "dr hab inż.", UserId = 15 },
                        new { Id = 1, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN1", InstituteId = 1, LastName = "PromoterS1", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 16 },
                        new { Id = 2, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN2", InstituteId = 2, LastName = "PromoterS2", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 17 },
                        new { Id = 3, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN3", InstituteId = 3, LastName = "PromoterS3", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 18 },
                        new { Id = 4, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN4", InstituteId = 4, LastName = "PromoterS4", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 19 },
                        new { Id = 5, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN5", InstituteId = 5, LastName = "PromoterS5", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 20 },
                        new { Id = 6, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN6", InstituteId = 6, LastName = "PromoterS6", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 21 },
                        new { Id = 7, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN7", InstituteId = 7, LastName = "PromoterS7", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 22 },
                        new { Id = 8, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN8", InstituteId = 8, LastName = "PromoterS8", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 23 },
                        new { Id = 9, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN9", InstituteId = 9, LastName = "PromoterS9", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 24 },
                        new { Id = 16, ExpectedNumberOfBachelorProposals = 1, ExpectedNumberOfMasterProposals = 1, FirstName = "Katarzyna", InstituteId = 10, LastName = "Adamska", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 25 },
                        new { Id = 17, ExpectedNumberOfBachelorProposals = 3, ExpectedNumberOfMasterProposals = 2, FirstName = "Krzysztof", InstituteId = 10, LastName = "Alejski", TitlePostfix = "prof. PP", TitlePrefix = "dr hab. inż.", UserId = 26 },
                        new { Id = 10, ExpectedNumberOfBachelorProposals = 1000, ExpectedNumberOfMasterProposals = 1000, FirstName = "PromoterN10", InstituteId = 10, LastName = "PromoterS10", TitlePostfix = "", TitlePrefix = "dr inż.", UserId = 27 }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("MaxNumberOfStudents");

                    b.Property<int>("Mode");

                    b.Property<string>("OutputData");

                    b.Property<int>("PromoterId");

                    b.Property<string>("Specialization");

                    b.Property<DateTime>("StartingDate");

                    b.Property<int>("Status");

                    b.Property<int>("StudyProfile");

                    b.Property<string>("TopicEnglish")
                        .IsRequired();

                    b.Property<string>("TopicPolish")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PromoterId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new { Id = 1, CourseId = 18, Description = "Opis.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = 15, Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Capri 2 - system for managing diploma topic cards", TopicPolish = "Capri 2 - system do zarządzania kartami tematów prac dyplomowych" },
                        new { Id = 2, CourseId = 18, Description = "Celem pracy jest zaimplementowanie metod Electre 1s i Electre TRI jako aplikacji desktopowych.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = 11, Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Implementation of chosen methods from Electre family", TopicPolish = "Implementacja wybranych metod z rodziny Electre" },
                        new { Id = 3, CourseId = 18, Description = "Opis.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = 12, Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Implementation of decision support methods based on utility function (UTA, Assess)", TopicPolish = "Implementacja metod wspomagania decyzji opartych na funkcji użyteczności (UTA, Assess)" },
                        new { Id = 4, CourseId = 18, Description = "Opis.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = 13, Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Extension of diviz platform", TopicPolish = "Rozszerzenie platformy diviz o metody wielokryterialnego wspomagania decyzji oparte na różnych modelach preferencji" },
                        new { Id = 5, CourseId = 18, Description = "Opis.....", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = 14, Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "Style transfering using a neural network", TopicPolish = "Transfer stylu przy użyciu sieci neuronowej" },
                        new { Id = 6, CourseId = 27, Description = "Praca będzie polegać na własnoręcznym upakowaniu kolumny chromatograficznej, doborze odpowiednich warunków pomiaru w celu wyznaczenia podstawowych parametrów dla niestandardowych kolumn do HPLC.", Level = 0, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = 16, Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "No title", TopicPolish = "Wyznaczenie parametrów kolumny chromatograficznej za pomocą odwróconej chromatografii cieczowej" },
                        new { Id = 7, CourseId = 27, Description = "Brak opisu", Level = 1, MaxNumberOfStudents = 4, Mode = 0, OutputData = "Brak danych", PromoterId = 17, Specialization = "-", StartingDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 0, StudyProfile = 0, TopicEnglish = "No title", TopicPolish = "Analiza i projektowanie procesów wydzielania produktów otrzymywanych w procesie biokonwersji surowców odnawialnych" }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("IndexNumber");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int?>("ProposalId");

                    b.Property<int>("Semester");

                    b.Property<int>("StudyLevel");

                    b.Property<int>("StudyMode");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IndexNumber")
                        .IsUnique();

                    b.HasIndex("ProposalId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = 1, FirstName = "Filip", IndexNumber = 132201, LastName = "Cegielski", Semester = 6, StudyLevel = 0, StudyMode = 0, UserId = 6 },
                        new { Id = 2, FirstName = "Marcin", IndexNumber = 132202, LastName = "Zawadzki", Semester = 6, StudyLevel = 0, StudyMode = 0, UserId = 7 },
                        new { Id = 3, FirstName = "Szymon", IndexNumber = 132203, LastName = "Wójcik", Semester = 6, StudyLevel = 0, StudyMode = 0, UserId = 8 },
                        new { Id = 4, FirstName = "Andrzej", IndexNumber = 132204, LastName = "Król", Semester = 6, StudyLevel = 0, StudyMode = 0, UserId = 9 },
                        new { Id = 5, FirstName = "Jan", IndexNumber = 132205, LastName = "Nowak", Semester = 6, StudyLevel = 0, StudyMode = 0, UserId = 10 }
                    );
                });

            modelBuilder.Entity("Capri.Database.Entities.Course", b =>
                {
                    b.HasOne("Capri.Database.Entities.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Promoter", b =>
                {
                    b.HasOne("Capri.Database.Entities.Institute", "Institute")
                        .WithMany("Promoters")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Proposal", b =>
                {
                    b.HasOne("Capri.Database.Entities.Course", "Course")
                        .WithMany("Proposals")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Capri.Database.Entities.Promoter", "Promoter")
                        .WithMany("Proposals")
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capri.Database.Entities.Student", b =>
                {
                    b.HasOne("Capri.Database.Entities.Proposal", "Proposal")
                        .WithMany("Students")
                        .HasForeignKey("ProposalId");

                    b.HasOne("Capri.Database.Entities.Identity.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
